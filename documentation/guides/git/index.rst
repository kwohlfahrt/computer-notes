.. _git-guide:

Git
===

Introduction
++++++++++++

This document is an overview of the git_ version control system. Examples use
the command-line interface to git, but some editors such as `Visual Studio
Code`_ or `Emacs`_ provide a graphical interface to git. The command line also
has many utility options that make commands simpler, so you are encouraged to
read the official documentation. Best practices for working with Github_ are
described in guide for :ref:`github-guide`.

Motivation
----------

Git provides a system for tracking changes to documents. This is useful for
individual projects, as you can easily go back to any point in the history of
the project. It is even more valuable for group projects, as it provides tools
to merge changes made by multiple contributors.

Basic Git
+++++++++

Starting a Project
------------------

To start a new project, run ``git init`` in the folder containing your code. To
work on an existing project, see `Cloning`_.

Cloning
~~~~~~~

To download a copy of an existing project, use ``git clone <url>``. The URL can
take many forms, but the most common are:

HTTPS
  ``https://example.com/path/to/code.git``
SSH
  ``ssh://user@example.com/path/to/code.git`` or
  ``user@example.com/path/to/code.git``
Local Folders
  ``/path/to/code.git`` or ``file:///path/to/code.git``

This creates a folder for the project, and downloads the files from the URL
provided, storing them as a remote (see `Remotes`_) named "origin".

Updating
--------

Downloading
~~~~~~~~~~~

To download changes from a remote repository, run ``git pull <remote>``.

Uploading
~~~~~~~~~

To upload changes you have made to a remote repository (see `Adding Changes`_),
run ``git push <remote>``.

Adding Changes
--------------

Adding changes is a two-step process with git. The first adds changes you have
made to a staging area, and the second assigns them to a commit, which is a
group of changes in a project's history. Once changes have been committed, they
can be shared with other users.

Staging
~~~~~~~

To show a summary of what changes you have made since the last commit, run ``git
status``. To view the changes, run ``git diff``.

To add the changes you have made to a file, run ``git add <filename>``. These
commands add your changes to the staging area. To review the changes you have
added to the staging area, run ``git diff --cached``.

To unstage the changes you have made to a file, run ``git reset HEAD
<filename>``. To undo any changes you have not staged, run ``git checkout
<filename>``.

Most commands in this section take a ``--patch`` option, (e.g. ``git
checkout --patch <filename>``), which will prompt you whether to apply to each
individual section of a file.

Committing
~~~~~~~~~~

When you are happy with the changes in the staging area, commit them with ``git
commit``. This will prompt you to write a description of the changes, and then
create a commit containing the message and the changes. These changes can now be
pulled from your repository, or pushed to a remote repository (see `Updating`_).
A git repository is just a sequence of commits, which can be shown as a set of
connected dots:

.. image:: commits.svg
   :align: center
   :height: 20

Advanced Git
++++++++++++

Ignoring files
--------------

Some files are generated by running a project, for example ``__pycache__``
folders in Python. A special file called ``.gitignore`` can contain the names of
files to ignore (one on each line), and git will ignore them (and not attempt to
add them).

Remotes
-------

It is possible to have more than one remote copy of the project. Traditionally,
the location the code is cloned from is given the name "origin". To list the
current remotes, run ``git remote show``. To show detailed information about a
remote, run ``git remote show <name>``.

To add a new remote, use ``git remote add <name> <url>``. The URL can take many
forms, as described in `Cloning`_.

An existing remote can be renamed with ``git remote rename <old> <new>``, and
deleted with ``git remote delete <name>``. The URL remote can be changed with
``git remote set-url <name> <url>``.

Branches
--------

A project may contain multiple branches, for example a branch for each released
version, or each feature currently in development. Commits can be added to
branches individually, and merged later. Traditionally, the main branch is
called "master". Additionally, the currently checked out branch has the special
name "HEAD". When referring to branches in a remote repository, they are
separated by a forward slash (e.g. ``origin/master`` refers to the branch
``master`` at the remote ``origin``)

To list the branches, use ``git branch --list``. To create a new branch based on
an existing branch, run ``git branch <new> <existing>``. The existing branch may
be in a remote repository, e.g. ``git branch testing origin/testing``. To switch
to a branch, use ``git checkout <branch>``.

For example, after creating the branch ``feature`` from ``master``, commits can
be independently added to both branches:

.. image:: branch.svg
   :align: center
   :height: 64

To delete a branch, use ``git branch --delete <branch>``.

Rebasing
~~~~~~~~

Rebasing changes what commit the current branch is based on. ``git rebase <base>
<branch>`` inserts the changes in "base" before those of "branch".

.. image:: rebase.svg
   :align: center
   :height: 64

The ``--interactive`` option lets you edit which changes will be included, this
lets you edit the history of a branch by rebasing onto an earlier version of
itself. For example ``git rebase --interactive master~5 master`` will let you
edit any of the previous 5 commits.

Merging
~~~~~~~

To incorporate changes from different branches into the current branch, use
``git merge <branches>`` (you can also refer to specific commits).

.. image:: merge.svg
   :align: center
   :height: 64

This does not delete the branch, and commits can still be added to it for later
merging.

Conflict Resolution
~~~~~~~~~~~~~~~~~~~

Merging and rebasing may result in an error if the changes made in the two
branches conflict. The conflict will be presented as shown below:

.. code-block:: none

  ...
  Here is some surrounding text.

  <<<<<<< yours:sample.txt
  Conflict resolution is hard;
  let's go shopping.
  =======
  Git makes conflict resolution easy.
  >>>>>>> theirs:sample.txt

  The text continues here.
  ...

If this occurs, the file needs to be manually edited and added (see `Staging`_),
before continuing. Once the conflict is resolved, run ``git rebase --continue``
(or ``merge``) to proceed. If the merge is too complicated, ``git merge/rebase
--abort`` resets your files to the state they were in before the merge.

Stashing
--------

Merging and rebasing require a clean working directory (i.e. no changes to any
files). To store your current changes, use ``git stash``. ``git stash --list``
lists the current sets of stashed changes. ``git stash apply <stash>`` can then
be used to re-apply these changes later, or ``git stash drop <stash>`` to forget
them.

Garbage Collection
------------------

Frequent merging and rebasing can lead to an increase in the size of the
repository. You can reclaim some disk space with the ``git gc`` (garbage
collect) command. The reason this is not done automatically is that it is
normally possible to recover accidentally deleted commits - ``git gc``
permanently deletes them.

.. _git: https://git-scm.com/
.. _Github: https://github.com
.. _Visual Studio Code: https://code.visualstudio.com/
.. _Emacs: https://www.gnu.org/software/emacs/

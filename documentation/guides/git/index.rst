.. _git-guide:

Git
===

Introduction
++++++++++++

This document is an overview of the git_ version control system, by example.
Examples use the command-line interface to git, but some editors such as `Visual
Studio Code`_ or `Emacs`_ provide a graphical interface to git. The command line
also has many utility options that make commands simpler, so you are encouraged
to read the official documentation. Best practices for working with Github_ are
described in guide for :ref:`github-guide`.

Motivation
----------

Git provides a system for tracking changes to documents. This is useful for
individual projects, as you can easily go back to any point in the history of
the project. It is even more valuable for group projects, as it provides tools
to merge changes made by multiple contributors.

Starting a Project
++++++++++++++++++

To start a new project, run ``git init <folder>`` on the folder containing your
files::

  > git init ~/Documents/code/project
  > cd ~/Documents/code/project

If the ``<folder>`` is omitted, the current directory will be used. For
information on how download an existing project, see `Cloning`_ below.

Adding Changes
++++++++++++++

Adding changes is a two-step process with git. The first adds changes you have
made to a staging area, and the second assigns them to a commit, which is a
group of changes in a project's history. Once changes have been committed, they
can be shared with other users.

First, we will make some changes to be added::

  > echo '- learn git' >> todo.txt
  > echo '- milk' >> shopping.txt

Staging
-------

To add the changes you have made to a file, run ``git add <filename>``::

  > git add todo.txt

``git add --patch`` can be used to add sections of a file at a time.

Now, we'll add some more changes::

  > echo "- create a commit" >> todo.txt

To show a summary of what changes you have made since the last commit, run ``git
status``::

  > git status
  On branch master

  No commits yet

  Changes to be committed:
    (use "git rm --cached <file>..." to unstage)

      new file:   todo.txt

  Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git checkout -- <file>..." to discard changes in working directory)

      modified:   todo.txt

  Untracked files:
    (use "git add <file>..." to include in what will be committed)

      shopping.txt

Here we can see four categories of files:

Staged
  These files have changes in them, which have been added to the staging area or
  `index`.

Modified
  These files have been staged (or committed previously), but have been modified
  since.

Untracked
  These files have never been staged, and git is not aware of their contents.

To view the changes in our modified files, run ``git diff``::

  > git diff
  diff --git a/todo.txt b/todo.txt
  index 60f603d..88cca36 100644
  --- a/todo.txt
  +++ b/todo.txt
  @@ -1 +1,2 @@
   - learn git
  +- create a commit

The first four lines indicate which file is being compared, the fifth line
(starting with ``@@``) shows where in the file is shown. The next line shows an
unchanged line, and the last (starting with ``+``) shows an inserted line.
Deleted lines would be shown too, but start with a ``-``.

``git diff --cached`` shows the changes in our staging area.

Committing
----------

When you are happy with the changes in the staging area, commit them with ``git
commit``. This will prompt you to write a description of the changes, and then
create a commit containing the message and the changes. We will provide the
message at the command-line::

  > git commit --message "Add todo"
  [master (root-commit) 82227a2] Add todo
  1 file changed, 1 insertion(+)
  create mode 100644 todo.txt

Just so we have a bit more to work with, we will add another commit::

  > git add shopping.txt
  > git commit -m "Add shopping list"
  [master 90af6c1] Add shopping list
  1 file changed, 1 insertion(+)
  create mode 100644 shopping.txt

These changes can now be pulled from your repository, or pushed to a remote
repository (see `Uploading`_ and `Downloading`_).

Ignoring files
--------------

Some files are generated by running a project, for example ``__pycache__``
folders in Python. A special file called ``.gitignore`` can contain the names of
files to ignore (one on each line), and git will ignore them (and not attempt to
add them).

Commits
+++++++

A git repository is just a sequence of commits, which is often shown as a set of
connected dots:

.. image:: images/commits.svg
   :align: center
   :height: 20


To view a history of commits, run ``git log``::

  > git log
  commit 90af6c1072167c22ff55a6c6618298ee31818952 (HEAD -> master)
  Author: Kai Wohlfahrt <kjw53@cam.ac.uk>
  Date:   Thu Jan 25 12:05:40 2018 +0000

      Add shopping list

  commit 82227a29388ed3b2e9ccd0e06c8e9f621e083061
  Author: Kai Wohlfahrt <kjw53@cam.ac.uk>
  Date:   Thu Jan 25 11:59:53 2018 +0000

      Add todo

Each commit contains the following information has a commit ID, which is a
`hash`. This is followed by any aliases in parentheses - for example, commit
``90af6c`` is also known as ``HEAD`` and ``master``. ``HEAD`` is always the
currently checked-out commit, and ``master`` is the name of a :ref:`branch
<git-branches>`

.. note:: The commit IDs will be different for everyone, as they depend on the
   exact changes included, the previous commit, the date, and the author.

Checking Out
------------

Any commit can be checked out with ``git checkout <ID>``. The commit ID can be
abbreviated, as long as it is unique. for example::

  > git checkout 82227a
  M	todo.txt
  HEAD is now at 82227a2... Add todo
  > git log --oneline
  82227a2 (HEAD) Add todo
  > ls
  todo.txt

``HEAD`` has been modified to point at the commit we specified. Note that
``shopping.txt`` is now gone, as this was part of the other commit. However, our
modifications to ``todo.txt`` have remained intact, shown by the ``M todo.txt``
line.

To get back to our previous state, we can check out the master :ref:`branch
<git-branches>`::

  > git checkout master
  M todo.txt
  Previous HEAD position was 82227a2... Add todo
  Switched to branch 'master'
  > git log --oneline
  90af6c1 (HEAD -> master) Add shopping list
  82227a2 Add todo

Files
+++++

``git checkout <path>`` can also be used on individual files. For example, to remove
any unstaged changes::

  > cat todo.txt
  - learn git
  - create a commit
  > git checkout todo.txt
  > cat todo.txt
  - learn git

You can also specify any commit to reset the contents of a file to their state
as of that commit, e.g. ``git checkout <commit> <path>``.

Resetting
---------

Checking out a different commit did not modify ``master``, only ``HEAD``. If we
do want to modify the branch, we should use ``git reset`` instead.

``git reset <commit>`` resets the current HEAD to a particular commit. For
example::

  > git reset 82227a2
  > git log --oneline
  82227a2 (HEAD -> master) Add todo
  > git status
  On branch master
  Untracked files:
    (use "git add <file>..." to include in what will be committed)

      shopping.txt

Note both ``HEAD`` and ``master`` are now at commit ``82227a2``. The folder is
by default left in the current state, so ``shopping.txt`` now exists as an
untracked file and can be checked out.

Files
+++++

``git reset <path>`` can also be used on individual files, where it acts as the
inverse of ``git add``::

  > git add shopping.txt
  > git status
  On branch master
  Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)

      new file:   shopping.txt

  > git reset HEAD shopping.txt 
  > git status
  On branch master
  Untracked files:
    (use "git add <file>..." to include in what will be committed)

      shopping.txt

  nothing added to commit but untracked files present (use "git add" to track)

You can also specify any commit to reset the index to the state of the file as
of that commit, e.g. ``git reset <commit> <path>``.

Remotes
-------

It is possible to have more than one copy of the project, and keep them in sync
using git.

Cloning
~~~~~~~

To clone an existing repository, use ``git clone <url> <folder>``::

  > git clone ~/Documents/code/project ~/Documents/code/project_2
  > cd ~/Documents/code/project_2

The URL can take many forms, but the most common are:

HTTPS
  HTTPS can be used to download code from a web-server (e.g. Github):
  ``https://example.com/path/to/code.git``
SSH
  SSH is an alternative way of connecting to a remote server:
  ``ssh://user@example.com/path/to/code.git`` or
  ``user@example.com/path/to/code.git``
Local Folders
  Local folders can be cloned too, as in the example above:
  ``/path/to/code.git`` or ``file:///path/to/code.git``

The remote server will be saved as a remote named "origin".

Managing Remotes
~~~~~~~~~~~~~~~~

The ``git remote`` command is used to manage remote repositories::

  > git remote show
  origin
  > git remote show origin
  * remote origin
    Fetch URL: ~/Documents/code/project
    Push  URL: ~/Documents/code/project
    HEAD branch: master
    Remote branch:
      master tracked
    Local branch configured for 'git pull':
      master merges with remote master
    Local ref configured for 'git push':
      master pushes to master (up to date)

To add a new remote, use ``git remote add <name> <url>``. The URL can take many
forms, as described in `Cloning`_.

An existing remote can be renamed with ``git remote rename <old> <new>``, and
deleted with ``git remote delete <name>``. The URL of a remote can be changed
with ``git remote set-url <name> <url>``.

Downloading
~~~~~~~~~~~

To download changes from a remote repository, run ``git pull <remote>``.

Uploading
~~~~~~~~~

To upload changes you have made to a remote repository (see `Adding Changes`_),
run ``git push <remote>``.

Advanced Topics
+++++++++++++++

.. toctree::
   :maxdepth: 1
   :glob:

   *

.. _git: https://git-scm.com/
.. _Github: https://github.com
.. _Visual Studio Code: https://code.visualstudio.com/
.. _Emacs: https://www.gnu.org/software/emacs/
